{% extends 'admin/admin_index.html.twig' %}

{% block title %}{{ page }}{% endblock %}

{% block body %}
    <h2>{{ page }}</h2>
    <br>
    <div class="alert alert-success" style="display: none;" role="alert">

    </div>
    <br>

    <div class="col-6" style="margin: 0 auto;">
        {{ form_start(form) }}
        {{ form_end(form) }}
        <div class="btn btn-primary fetch-btn" style="margin-bottom: 50px">Сохранить</div>
    </div>
    <div class="display_flex">
        <div class="schedule_table">
            <div class="schedule_days">

            </div>
            <div class="schedule_block">

            </div>

        </div>
        <div class="schedule_view" style="border: 1px solid black; margin: 10px; padding: 3px; width: 400px;">

        </div>
    </div>

    <!-- Создание объекта intrvals -->
    <script>
        let intervals = {
            "1": [],
            "2": [],
            "3": [],
            "4": [],
            "5": [],
            "6": [],
            "7": [],
        };
        {% if activity == "edit" %}

            {% for number in 1..7 %}
                {% if ints_of_days[number] %}
                    {% for interval in ints_of_days[number] %}
                        intervals["{{ number }}"].push({"start": {{ interval.start }}, "end": {{ interval.endTime }} });
                    {% endfor %}
                {% endif %}
            {% endfor %}

        {% endif %}
    </script>
    <!-- Построение сетки раписания -->
    <script>
        // Построение сетки раписания
        const schedBlock = document.querySelector(".schedule_block");
        let i;
        let start = 0;
        let dayWeek = 0;
        for (i = 1; i<=48*7; i++){
            let block = document.createElement("div");
            block.classList.add("time_point");

            start = (i-1)%48 === 0 ? 0 : start +30
            if (start === 0) dayWeek += 1;
            block.setAttribute("data-start", start);
            block.setAttribute("data-end", start+29);
            block.setAttribute("data-day-week", dayWeek);

            schedBlock.appendChild(block);
        }
        // Создание колонки с названиями дней
        const schedDays = document.querySelector(".schedule_days");
        const days = ["пн", "вт", "ср", "чт", "пт", "сб", "вс"]
        for (i = 1; i<=7; i++){
            let block = document.createElement("div");
            block.classList.add("day_point");
            block.innerText = days[i-1];
            schedDays.appendChild(block);
        }
        // Создание линии для 1 даты с названиями дней
    </script>
    <!-- Скрипт выделения блоков согласно intrevals -->
    <script>

        {% if activity == "edit" %}
        for (let i=1; i<=7; i++){
            let num = i.toString();
            let daysblocks = document.querySelectorAll('[data-day-week="'+num+'"]');
            console.log(daysblocks)
            intervals[num].forEach((inter)=>{
                daysblocks.forEach((elem)=>{
                    if (parseInt(elem.dataset.start) >= parseInt(inter.start) && parseInt(elem.dataset.end) <= parseInt(inter.end)){
                        elem.classList.add("to_blue");
                    }
                });
            })
        }
        {% endif %}



        // interval = intervals["1"][0];


    </script>
    <!-- Скрипт выделения блоков в расписании -->
    <script>
        // Скрипт выделения блоков в расписании
        let mouseDown = false;
        document.body.onmousedown = function() {
            mouseDown = true;
        }
        document.body.onmouseup = function() {
            mouseDown = false;
        }
        const timePoints = document.querySelectorAll(".time_point");
        console.log(timePoints)
        const toggleBlue = (ev)=>{
            ev.target.classList.toggle("to_blue");
        }

    </script>
    <!-- Создание объекта расписанья -->
    <script>
        let schedule = {
            "1": [],
            "2": [],
            "3": [],
            "4": [],
            "5": [],
            "6": [],
            "7": [],
        };
        let form = document.forms.schedule_form;

        const scheduleView = document.querySelector(".schedule_view")
        const newObj = (elem) => {
            return {
                "start": elem.dataset.start,
                "end": elem.dataset.end,
            }
        }

        const insertDiv = ()=>{
            let newDiv = document.createElement("div");
            newDiv.classList.add('day');
            newDiv.style.border = "1px solid black";
            newDiv.style.padding = "3px";
            newDiv.style.margin = "10px";
            newDiv.style.fontSize = "14px";
            return newDiv;
        }

        const remakeSchedule = ()=>{
            schedule = {
                "1": [],
                "2": [],
                "3": [],
                "4": [],
                "5": [],
                "6": [],
                "7": [],
            }

            let dayWeek = 1;
            let dayWeekString = dayWeek.toString();
            let check = 0;
            let points = document.querySelectorAll(".to_blue");
            let step = 1;

            // Обход всех поинтов
            points.forEach((elem)=>{
                // console.log("шаг" + step);
                // Проверяем и изменяем день недели на день недели тайм-поинта, обнуляем счетчики
                if ( dayWeekString !== elem.dataset.dayWeek) {
                    dayWeek = elem.dataset.dayWeek;
                    check = 0;
                    step = 1;
                    dayWeekString = dayWeek.toString();
                }
                // если расписание этого дня недели ещё пустое, создаем первый кусок расписания из таймпоинта
                if (schedule[dayWeekString].length === 0){
                    // console.log("+ кусок потому что 0, шаг" + step)
                    schedule[dayWeekString].push(newObj(elem));
                }

                if (schedule[dayWeekString][check].end.toString() === (elem.dataset.start - 1).toString()){
                    schedule[dayWeekString][check].end = elem.dataset.end;
                } else if (step !== 1) {
                    // console.log("+ кусок потому что не следующий и длина ещё 0, шаг " + step)
                    schedule[dayWeekString].push(newObj(elem));
                    check += 1;
                }
                step += 1;
            })
            while (scheduleView.firstChild) {
                scheduleView.removeChild(scheduleView.firstChild);
            }

            for (i=1; i<=7; i++){
                if (schedule[i.toString()].length > 0){
                    let dayBlock = insertDiv();
                    dayBlock.style.backgroundColor = "#a6ff7e";
                    scheduleView.appendChild(dayBlock);
                    schedule[i.toString()].forEach((item)=>{
                        let schedBlock = insertDiv();
                        schedBlock.style.backgroundColor = "#fff";
                        let nachalo = item.start;
                        let konec = item.end;
                        schedBlock.innerText = `${Math.floor(nachalo/60)}:${nachalo%60} - ${Math.floor(konec/60)}:${konec%60}`;
                        dayBlock.appendChild(schedBlock);
                    })
                }

            }
            return schedule;
        }



    </script>
    <script>
        timePoints.forEach((element)=>{
            element.addEventListener("mousedown", (ev)=>{
                toggleBlue(ev);
                // ev.target
            }, false);
            element.addEventListener("mouseover", (ev)=>{
                if(mouseDown){
                    toggleBlue(ev);
                }
            });
            element.addEventListener("mouseup", async ()=>{
                schedule = remakeSchedule();

            })
        });
        document.querySelector(".fetch-btn").addEventListener("click", ()=>{
            let responseStatus = 0;
            let messageStatus = "Ничего не произошло";
            fetch( "{{ path('api_admin_schedule_create') }}", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json;charset=utf-8'
                },
                body: JSON.stringify({
                    "schedule": remakeSchedule(),
                    "activity": "{{ activity }}",
                    "form": {
                        "sch_name": form.elements[0].value,
                        "worker_id": form.elements[1].value,
                        "filial_id": form.elements[2].value,
                    },
                })
            }).then((response) => {
                responseStatus = response.statusCode;
                console.log(response)
                return response.json();
            }).then((data) => {
                return JSON.parse(data);
            }).then((data) => {
                let mess = document.querySelector(".alert");
                mess.innerText = "Сохранено интервалов: " + data.made_intervals;
                mess.style.display = "block";
            })
            ;
        })
        console.log("shedule: ", remakeSchedule());

    </script>


{% endblock %}

